{"version":3,"file":"component---src-templates-tags-js-732ee1a5fb20ba0202f1.js","mappings":"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","sources":["webpack://atiq-israk/./src/components/Blog/BlogCard.js","webpack://atiq-israk/./src/hooks/useRandomBlogPost.js","webpack://atiq-israk/./src/components/Blog/BlogLayout.js","webpack://atiq-israk/./src/components/Blog/Tags.js","webpack://atiq-israk/./src/components/common/SplitLayout.js","webpack://atiq-israk/./src/components/slugify.js","webpack://atiq-israk/./src/templates/tags.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Link from 'gatsby-link';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { TagBreadcrumb } from './Tags';\r\nimport slugify from '@components/slugify';\r\n\r\nconst PostWrapper = styled.article`\r\n  overflow: auto;\r\n  margin-bottom: 70px;\r\n  /* margin-top: 100px; */\r\n  padding: 30px 30px;\r\n  border-top: 5px solid\r\n    ${p => (p.theme.dark ? p.theme.accentColor : p.theme.primaryColor)};\r\n  border-radius: 10px;\r\n  box-shadow: ${p => p.theme.shadowSmall};\r\n  background-color: ${p => p.theme.secondaryColor};\r\n\r\n  &:hover {\r\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  span {\r\n    font-size: 13px;\r\n    color: gray;\r\n  }\r\n`;\r\n\r\nexport const BlogDateAndReadTime = ({ date, readtime }) => (\r\n  <span style={{ fontSize: 13, color: 'gray' }}>\r\n    <span aria-label={`publish date ${date}`}>\r\n      <FontAwesomeIcon color=\"gray\" icon=\"calendar-alt\" />\r\n      &nbsp;&nbsp;{date}\r\n    </span>\r\n    &nbsp;&nbsp;&nbsp;\r\n    <span aria-label={`${readtime} minutes read`}>\r\n      <FontAwesomeIcon color=\"gray\" icon=\"clock\" />\r\n      &nbsp;&nbsp;{readtime}min read\r\n    </span>\r\n  </span>\r\n);\r\n\r\nconst BlogCard = ({ date, readtime, title, excerpt, slug, tags }) => {\r\n  return (\r\n    <Link to={slug} aria-label={`${title} - read time ${readtime} minutes`}>\r\n      <PostWrapper>\r\n        <BlogDateAndReadTime date={date} readtime={readtime} />\r\n\r\n        <h2>{title}</h2>\r\n        <p>{excerpt}</p>\r\n\r\n        <div style={{ marginTop: 20 }}>\r\n          {tags.map(tag => (\r\n            <TagBreadcrumb\r\n              key={tag}\r\n              aria-label={`${tag} tag`}\r\n              to={`/blog/tags/${slugify(tag)}/`}\r\n            >\r\n              {tag}\r\n            </TagBreadcrumb>\r\n          ))}\r\n        </div>\r\n      </PostWrapper>\r\n    </Link>\r\n  );\r\n};\r\n\r\nBlogDateAndReadTime.propTypes = {\r\n  date: PropTypes.string.isRequired,\r\n  readtime: PropTypes.number.isRequired,\r\n};\r\n\r\nBlogCard.propTypes = {\r\n  date: PropTypes.string.isRequired,\r\n  readtime: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  excerpt: PropTypes.string.isRequired,\r\n  slug: PropTypes.string.isRequired,\r\n  tags: PropTypes.array.isRequired,\r\n};\r\nexport default BlogCard;\r\n","import { useStaticQuery, graphql } from 'gatsby';\r\n\r\nexport const randomGenerator = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nconst useRandomBlogPost = () => {\r\n  const blogposts = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        allMarkdownRemark(filter: { fields: { posttype: { eq: \"blog\" } } }) {\r\n          edges {\r\n            node {\r\n              frontmatter {\r\n                title\r\n              }\r\n              fields {\r\n                slug\r\n              }\r\n            }\r\n          }\r\n          totalCount\r\n        }\r\n      }\r\n    `\r\n  );\r\n\r\n  let randomPost =\r\n    blogposts.allMarkdownRemark.edges[\r\n      randomGenerator(0, blogposts.allMarkdownRemark.totalCount - 1)\r\n    ];\r\n\r\n  // make sure we don't have redundant randomPost\r\n  if (typeof window !== 'undefined') {\r\n    while (randomPost.node.fields.slug === window.location.pathname) {\r\n      randomPost =\r\n        blogposts.allMarkdownRemark.edges[\r\n          randomGenerator(0, blogposts.allMarkdownRemark.totalCount - 1)\r\n        ];\r\n      // don't wanna run it second time\r\n      break;\r\n    }\r\n  }\r\n\r\n  return {\r\n    randomSlug: randomPost.node.fields.slug,\r\n    randomTitle: randomPost.node.frontmatter.title,\r\n  };\r\n};\r\nexport default useRandomBlogPost;\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport Link from 'gatsby-link';\r\n\r\nimport Tags from '@components/Blog/Tags';\r\nimport SplitLayout from '@common/SplitLayout';\r\nimport useRandomBlogPost from '@src/hooks/useRandomBlogPost';\r\n\r\nconst BlogLayout = ({ children, sharerSection }) => {\r\n  const { randomSlug, randomTitle } = useRandomBlogPost();\r\n\r\n  return (\r\n    <SplitLayout\r\n      content={children}\r\n      aside={\r\n        <>\r\n          <section>\r\n            <h4>Random post</h4>\r\n            <Link style={{ fontSize: '16px' }} to={randomSlug}>\r\n              {randomTitle}\r\n            </Link>\r\n            <br />\r\n            <br />\r\n          </section>\r\n          <section>\r\n            <h4>Tags</h4>\r\n            <Tags />\r\n            <br />\r\n          </section>\r\n          {sharerSection && sharerSection}\r\n        </>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nBlogLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  sharerSection: PropTypes.node,\r\n};\r\n\r\nexport default BlogLayout;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link, graphql, useStaticQuery } from 'gatsby';\r\nimport slugify from '@components/slugify';\r\n\r\nexport const useTags = () => {\r\n  const tags = useStaticQuery(graphql`\r\n    query {\r\n      allMarkdownRemark(limit: 2000) {\r\n        group(field: frontmatter___tags) {\r\n          fieldValue\r\n          totalCount\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  return tags;\r\n};\r\n\r\nexport const TagBreadcrumb = styled(Link)`\r\n  float: left;\r\n  border: 1px solid ${p => (p.theme.dark ? p.theme.primaryColor : '#d9e0ff')};\r\n  border-radius: 50px;\r\n  padding: 8px 13px;\r\n  line-height: 10px;\r\n  margin: 5px;\r\n  font-size: 12px;\r\n\r\n  &:hover {\r\n    background: ${p => (p.theme.dark ? p.theme.primaryColor : '#d9e0ff')};\r\n    color: ${p => (p.theme.dark ? '#d9e0ff' : '#f06529')};\r\n  }\r\n`;\r\n\r\nconst Tags = () => {\r\n  const tags = useTags();\r\n\r\n  return (\r\n    <section style={{ overflow: 'auto' }}>\r\n      {tags.allMarkdownRemark.group.map(tag => (\r\n        <TagBreadcrumb\r\n          key={tag.fieldValue}\r\n          to={`/blog/tags/${slugify(tag.fieldValue)}/`}\r\n          aria-label={`${tag.totalCount} posts tagged with ${tag.fieldValue}`}\r\n        >\r\n          {tag.fieldValue}, {tag.totalCount}\r\n        </TagBreadcrumb>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Tags;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst SplitLayoutWrapper = styled.section`\r\n  ${p => p.theme.spacing.sectionBottom};\r\n\r\n  & article:first-of-type {\r\n    margin-top: 15px;\r\n  }\r\n\r\n  display: grid;\r\n  grid-template-columns: minmax(750px, 1fr) 1fr;\r\n  grid-column-gap: 30px;\r\n  grid-template-areas: 'post side';\r\n\r\n  .layout__content {\r\n    grid-area: post;\r\n  }\r\n  .layout__aside {\r\n    grid-area: side;\r\n  }\r\n\r\n  @media ${props => props.theme.media.fablet} {\r\n    /* setting g-t-c to 1fr 1fr because in mobile \r\n    version minmax was breaking the layout */\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-column-gap: 0px;\r\n    grid-row-gap: 30px;\r\n    grid-template-areas:\r\n      'post post'\r\n      'side side';\r\n  }\r\n\r\n  .sticky__aside {\r\n    position: sticky;\r\n    top: 100px;\r\n  }\r\n`;\r\n\r\nconst SplitLayout = ({ content, aside }) => (\r\n  <SplitLayoutWrapper>\r\n    <section className=\"layout__content\">{content && content}</section>\r\n    <section className=\"layout__aside\">\r\n      <aside className=\"sticky__aside\">{aside && aside}</aside>\r\n    </section>\r\n  </SplitLayoutWrapper>\r\n);\r\n\r\nSplitLayout.propTypes = {\r\n  content: PropTypes.node.isRequired,\r\n  aside: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default SplitLayout;\r\n","const slugify = str =>\r\n  str &&\r\n  str\r\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\r\n    .map(x => x.toLowerCase())\r\n    .join('-');\r\n\r\nmodule.exports = slugify;\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport SEO from '@components/seo';\r\nimport Layout from '@components/Layout/Layout';\r\nimport BlogCard from '@components/Blog/BlogCard';\r\nimport BlogLayout from '@components/Blog/BlogLayout';\r\n\r\nconst TagsPage = ({ data, pageContext }) => {\r\n  const { tag } = pageContext;\r\n  const { edges, totalCount } = data.allMarkdownRemark;\r\n\r\n  const tagHeader = `${totalCount} post${\r\n    totalCount === 1 ? '' : 's'\r\n  } tagged with \"${tag}\"`;\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title={tagHeader + ' | Atiq Israk'} />\r\n\r\n      <BlogLayout>\r\n        <h1>{tagHeader}</h1>\r\n        <br />\r\n        <br />\r\n        {edges.map(({ node }) => {\r\n          const { slug } = node.fields;\r\n          const { title, date, tags } = node.frontmatter;\r\n          return (\r\n            <BlogCard\r\n              tags={tags}\r\n              key={node.id}\r\n              slug={slug}\r\n              title={title}\r\n              date={date}\r\n              readtime={node.timeToRead}\r\n              excerpt={node.excerpt}\r\n            />\r\n          );\r\n        })}\r\n      </BlogLayout>\r\n    </Layout>\r\n  );\r\n};\r\nexport default TagsPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query ($tag: String) {\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          id\r\n          excerpt\r\n          timeToRead\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            tags\r\n            title\r\n            date(formatString: \"MMMM DD, YYYY\", locale: \"en\")\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["PostWrapper","styled","p","theme","dark","accentColor","primaryColor","shadowSmall","secondaryColor","BlogDateAndReadTime","date","readtime","style","fontSize","color","icon","title","excerpt","slug","tags","to","marginTop","map","tag","key","slugify","randomGenerator","min","max","Math","floor","random","blogposts","useStaticQuery","randomPost","allMarkdownRemark","edges","totalCount","window","node","fields","location","pathname","randomSlug","randomTitle","frontmatter","children","sharerSection","useRandomBlogPost","SplitLayout","content","aside","Tags","TagBreadcrumb","Link","overflow","group","fieldValue","SplitLayoutWrapper","spacing","sectionBottom","props","media","fablet","className","module","exports","str","match","x","toLowerCase","join","data","pageContext","tagHeader","id","timeToRead"],"sourceRoot":""}